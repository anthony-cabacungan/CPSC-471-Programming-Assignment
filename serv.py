# python serv.py <PORTNUMBER>

import socket
import sys
import os


def send_data(sock, data):
    sock.sendall(data.encode())


def receive_data(sock):
    return sock.recv(1024).decode()


# TODO: implement functions
def ftp_get(sock, file_name):
    # downloads file <file name> from the server
    try:
        with open(file_name, 'rb') as f:
            content = f.read()
        send_data(sock, f"{len(content)}")
        sock.sendall(content)
    except FileNotFoundError:
        send_data(sock, "File not found")


def ftp_put(sock, file_name):
    # uploads file <file name> to the server
    file_size = int(receive_data(sock))
    content = sock.recv(file_size)
    with open(file_name, 'wb') as f:
        f.write(content)
    send_data(sock, "File received")


def ftp_ls(sock):
    # lists files on the server
    files = ', '.join(os.listdir())
    send_data(sock, files)


# TODO: input validation / error handling wherever needed

if len(sys.argv) != 2:
    print("Usage: python serv.py <PORTNUMBER>")
    sys.exit()

serverPort = int(sys.argv[1])

# create sockets 
controlSocket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)

# bind sockets, dataSocket will use ephemeral port generated by 
controlSocket.bind(('', serverPort))
# dataSocket.bind(('',0))

controlSocket.listen(1)

print("Server is listening on port", serverPort)

while True:
    clientSock, addr = controlSocket.accept()
    print("Accepted connection from", addr)

    try:
        while True:
            command = receive_data(clientSock)
            if not command:
                break
            action, _, file_name = command.partition(' ')
            if action == 'GET':
                ftp_get(clientSock, file_name)
            elif action == 'PUT':
                ftp_put(clientSock, file_name)
            elif action == 'LS':
                ftp_ls(clientSock)
            elif action == 'QUIT':
                break
    finally:
        clientSock.close()
